 /* eslint-disable */
;(function(root, factory) {
  if (typeof define === 'function' && define.amd) { // AMD
    define([], factory);
  } else if (typeof exports === 'object') { // Node.js
    module.exports = factory();
  } else { // Browser
    var messages = factory();
    for (var key in messages) {
      root.Blockly.Msg[key] = messages[key];
    }
  }
}(this, function() {
// Este arquivo foi gerado automaticamente. Não modifique.

'use strict';

var Blockly = Blockly || { Msg: Object.create(null) };

Blockly.Msg["ADD_COMMENT"] = "Adicionar comentário";
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Não é possível excluir a variável '%1' porque ela faz parte da definição da função '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Alterar valor:";
Blockly.Msg["CLEAN_UP"] = "Limpar Blocos";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Blocos recolhidos contêm avisos.";
Blockly.Msg["COLLAPSE_ALL"] = "Recolher Blocos";
Blockly.Msg["COLLAPSE_BLOCK"] = "Recolher Bloco";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "cor 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "cor 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "proporção";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "misturar";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Mistura duas cores com uma dada proporção (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Escolha uma cor da paleta.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "cor aleatória";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Escolha uma cor aleatoriamente.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "azul";
Blockly.Msg["COLOUR_RGB_GREEN"] = "verde";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";
Blockly.Msg["COLOUR_RGB_RED"] = "vermelho";
Blockly.Msg["COLOUR_RGB_TITLE"] = "cor com";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Cria uma cor com a quantidade especificada de vermelho, verde e azul. Todos os valores devem estar entre 0 e 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "sair do loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continuar com a próxima iteração do loop";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Sair do loop que contém.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Pular o restante deste loop e continuar com a próxima iteração.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Aviso: Este bloco só pode ser usado dentro de um loop.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "para cada item %1 na lista %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Para cada item em uma lista, define a variável '%1' para o item e, em seguida, executa alguns comandos.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg["CONTROLS_FOR_TITLE"] = "contar com %1 de %2 até %3 com incremento de %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Fazer com que a variável '%1' assuma os valores do número inicial até o número final, contando pelo intervalo especificado, e execute os blocos indicados.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Adicione uma condição ao bloco se.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Adicione uma condição final, abrangente, ao bloco se.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Adicione, remova ou reordene seções para reconfigurar este bloco se.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "senão";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "senão se";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "se";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Se um valor for verdadeiro, então execute alguns comandos.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Se um valor for verdadeiro, execute o primeiro bloco de comandos. Caso contrário, execute o segundo bloco de comandos.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Se o primeiro valor for verdadeiro, execute o primeiro bloco de comandos. Caso contrário, se o segundo valor for verdadeiro, execute o segundo bloco de comandos.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Se o primeiro valor for verdadeiro, execute o primeiro bloco de comandos. Caso contrário, se o segundo valor for verdadeiro, execute o segundo bloco de comandos. Se nenhum dos valores for verdadeiro, execute o último bloco de comandos.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "faça";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repetir %1 vezes";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Execute alguns comandos várias vezes.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repetir até";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repetir enquanto";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Enquanto um valor for falso, execute alguns comandos.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Enquanto um valor for verdadeiro, execute alguns comandos.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Excluir todos os %1 blocos?";
Blockly.Msg["DELETE_BLOCK"] = "Excluir Bloco";
Blockly.Msg["DELETE_VARIABLE"] = "Excluir a variável '%1'";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Excluir %1 usos da variável '%2'?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Excluir %1 Blocos";
Blockly.Msg["DIALOG_CANCEL"] = "Cancelar";
Blockly.Msg["DIALOG_OK"] = "OK";
Blockly.Msg["DISABLE_BLOCK"] = "Desabilitar Bloco";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicar";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicar Comentário";
Blockly.Msg["ENABLE_BLOCK"] = "Habilitar Bloco";
Blockly.Msg["EXPAND_ALL"] = "Expandir Blocos";
Blockly.Msg["EXPAND_BLOCK"] = "Expandir Bloco";
Blockly.Msg["EXTERNAL_INPUTS"] = "Entradas Externas";
Blockly.Msg["HELP"] = "Ajuda";
Blockly.Msg["INLINE_INPUTS"] = "Entradas em Linha";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "criar lista vazia";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Retorna uma lista, de comprimento 0, sem registros de dados";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "lista";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Adicione, remova ou reordene seções para reconfigurar este bloco de lista.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "criar lista com";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Adicionar um item à lista.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Crie uma lista com qualquer número de itens.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "primeiro";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# do final";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "obter";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "obter e remover";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "último";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "aleatório";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "remover";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Retorna o primeiro item de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Retorna o item na posição especificada em uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Retorna o último item de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Retorna um item aleatório de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Remove e retorna o primeiro item de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Remove e retorna o item na posição especificada em uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Remove e retorna o último item de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Remove e retorna um item aleatório de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Remove o primeiro item de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Remove o item na posição especificada em uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Remove o último item de uma lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Remove um item aleatório de uma lista.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "até # do final";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "até #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "até o último";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "obter sublista a partir do primeiro";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "obter sublista a partir de # do final";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "obter sublista a partir de #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Cria uma cópia da porção especificada de uma lista.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 é o último item.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 é o primeiro item.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "encontrar a primeira ocorrência do item";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "encontrar a última ocorrência do item";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Retorna o índice da primeira/última ocorrência do item na lista. Retorna %1 se o item não for encontrado.";
Blockly.Msg["LISTS_INLIST"] = "na lista";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 está vazio";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Retorna verdadeiro se a lista estiver vazia.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg["LISTS_LENGTH_TITLE"] = "comprimento de %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Retorna o comprimento de uma lista.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_REPEAT_TITLE"] = "criar lista com o item %1 repetido %2 vezes";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Cria uma lista composta pelo valor dado repetido o número especificado de vezes.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "inverter %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Inverte uma cópia de uma lista.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "como";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "inserir em";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "definir";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Insere o item no início de uma lista.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Insere o item na posição especificada em uma lista.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Anexa o item ao final de uma lista.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Insere o item aleatoriamente em uma lista.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Define o primeiro item de uma lista.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Define o item na posição especificada em uma lista.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Define o último item de uma lista.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Define um item aleatório em uma lista.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascendente";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descendente";
Blockly.Msg["LISTS_SORT_TITLE"] = "ordenar %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Ordena uma cópia de uma lista.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alfabético, ignorar maiúsculas/minúsculas";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numérico";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alfabético";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "criar lista a partir do texto";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "criar texto a partir da lista";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Junta uma lista de textos em um único texto, separados por um delimitador.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Divide o texto em uma lista de textos, quebrando em cada delimitador.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "com delimitador";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "falso";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Retorna verdadeiro ou falso.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "verdadeiro";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Retorna verdadeiro se ambas as entradas forem iguais.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Retorna verdadeiro se a primeira entrada for maior que a segunda.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Retorna verdadeiro se a primeira entrada for maior ou igual à segunda.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Retorna verdadeiro se a primeira entrada for menor que a segunda.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Retorna verdadeiro se a primeira entrada for menor ou igual à segunda.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Retorna verdadeiro se ambas as entradas não forem iguais.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "não %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Retorna verdadeiro se a entrada for falsa. Retorna falso se a entrada for verdadeira.";
Blockly.Msg["LOGIC_NULL"] = "null";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Retorna null.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "e";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg["LOGIC_OPERATION_OR"] = "ou";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Retorna verdadeiro se ambas as entradas forem verdadeiras.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Retorna verdadeiro se pelo menos uma das entradas for verdadeira.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "teste";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "se falso";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "se verdadeiro";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Verifica a condição em 'teste'. Se a condição for verdadeira, retorna o valor 'se verdadeiro'; caso contrário, retorna o valor 'se falso'.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Retorna a soma dos dois números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Retorna o quociente dos dois números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Retorna a diferença dos dois números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Retorna o produto dos dois números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Retorna o primeiro número elevado à potência do segundo número.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 de X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Retorna o arco-tangente do ponto (X, Y) em graus de -180 a 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "alterar %1 por %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Adicione um número à variável '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Retorna uma das constantes comuns: π (3.141…), e (2.718…), φ (1.618…), √2 (1.414…), √(½) (0.707…) ou ∞ (infinito).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "limitar %1 de %2 a %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Limita um número para que esteja entre os limites especificados (inclusive).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "é divisível por";
Blockly.Msg["MATH_IS_EVEN"] = "é par";
Blockly.Msg["MATH_IS_NEGATIVE"] = "é negativo";
Blockly.Msg["MATH_IS_ODD"] = "é ímpar";
Blockly.Msg["MATH_IS_POSITIVE"] = "é positivo";
Blockly.Msg["MATH_IS_PRIME"] = "é primo";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Verifica se um número é par, ímpar, primo, inteiro, positivo, negativo ou se é divisível por um determinado número. Retorna verdadeiro ou falso.";
Blockly.Msg["MATH_IS_WHOLE"] = "é inteiro";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "resto de %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Retorna o resto da divisão dos dois números.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Um número.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "média da lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "máximo da lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "mediana da lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "mínimo da lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "moda(s) da lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "item aleatório da lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "desvio padrão da lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "soma da lista";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Retorna a média (média aritmética) dos valores numéricos da lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Retorna o maior número da lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Retorna o número mediano da lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Retorna o menor número da lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Retorna uma lista com o(s) item(ns) mais comum(ns) na lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Retorna um elemento aleatório da lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Retorna o desvio padrão da lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Retorna a soma de todos os números da lista.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "fração aleatória";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Retorna uma fração aleatória entre 0.0 (inclusivo) e 1.0 (exclusivo).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "inteiro aleatório de %1 até %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Retorna um inteiro aleatório entre os dois limites especificados, inclusive.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "arredondar";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "arredondar para baixo";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "arredondar para cima";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Arredonda um número para cima ou para baixo.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absoluto";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "raiz quadrada";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Retorna o valor absoluto de um número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Retorna e elevado à potência de um número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Retorna o logaritmo natural de um número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Retorna o logaritmo de base 10 de um número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Retorna a negação de um número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Retorna 10 elevado à potência de um número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Retorna a raiz quadrada de um número.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tan";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Retorna o arco cosseno de um número.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Retorna o arco seno de um número.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Retorna o arco tangente de um número.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Retorna o cosseno de um grau (não radiano).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Retorna o seno de um grau (não radiano).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Retorna a tangente de um grau (não radiano).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Criar variável de cor...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Criar variável numérica...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Criar variável de texto...";
Blockly.Msg["NEW_VARIABLE"] = "Criar variável...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Nome da nova variável:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Novo tipo de variável:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "permitir comandos";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "com:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Executa a função definida pelo usuário '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Executa a função definida pelo usuário '%1' e utiliza sua saída.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "com:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Criar '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Descreva esta função...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "fazer algo";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "para";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Cria uma função sem retorno.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "retornar";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Cria uma função com retorno.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Aviso: Esta função possui parâmetros duplicados.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Destacar definição da função";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Se um valor for verdadeiro, então retorne um segundo valor.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Aviso: Este bloco só pode ser usado dentro de uma definição de função.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "nome do parâmetro:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Adicione uma entrada à função.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "entradas";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Adicione, remova ou reordene as entradas desta função.";
Blockly.Msg["REDO"] = "Refazer";
Blockly.Msg["REMOVE_COMMENT"] = "Remover Comentário";
Blockly.Msg["RENAME_VARIABLE"] = "Renomear variável...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Renomear todas as variáveis '%1' para:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_APPEND_TITLE"] = "para %1 adicionar texto %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Anexa um texto à variável '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "para minúsculas";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "para Caixa de Título";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "para MAIÚSCULAS";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Retorna uma cópia do texto em outro formato de caixa.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "obter primeira letra";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "obter letra # a partir do final";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "obter letra #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg["TEXT_CHARAT_LAST"] = "obter última letra";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "obter letra aleatória";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";
Blockly.Msg["TEXT_CHARAT_TITLE"] = "no texto %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Retorna a letra na posição especificada.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "contar %1 em %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Conta quantas vezes um texto ocorre dentro de outro texto.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Adicionar um item ao texto.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "juntar";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Adicione, remova ou reordene seções para reconfigurar este bloco de texto.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "até letra # do final";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "até letra #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "até a última letra";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "no texto";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "obter substring a partir da primeira letra";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "obter substring a partir da letra # do final";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "obter substring a partir da letra #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Retorna uma porção especificada do texto.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "encontrar a primeira ocorrência do texto";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "encontrar a última ocorrência do texto";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "no texto %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Retorna o índice da primeira/última ocorrência do primeiro texto no segundo texto. Retorna %1 se o texto não for encontrado.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 está vazio";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Retorna verdadeiro se o texto fornecido estiver vazio.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "criar texto com";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Cria um pedaço de texto juntando qualquer número de itens.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg["TEXT_LENGTH_TITLE"] = "comprimento de %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Retorna o número de letras (incluindo espaços) no texto fornecido.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg["TEXT_PRINT_TITLE"] = "imprimir %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Imprime o texto, número ou outro valor especificado.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Solicita ao usuário um número.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Solicita ao usuário um texto.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "solicitar número com mensagem";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "solicitar texto com mensagem";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "substituir %1 por %2 em %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Substitui todas as ocorrências de um texto por outro.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "inverter %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Inverte a ordem dos caracteres no texto.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Uma letra, palavra ou linha de texto.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "remover espaços de ambos os lados de";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "remover espaços do lado esquerdo de";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "remover espaços do lado direito de";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Retorna uma cópia do texto com espaços removidos de uma ou ambas as extremidades.";
Blockly.Msg["TODAY"] = "Hoje";
Blockly.Msg["UNDO"] = "Desfazer";
Blockly.Msg["UNNAMED_KEY"] = "sem nome";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "item";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Criar 'definir %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Retorna o valor desta variável.";
Blockly.Msg["VARIABLES_SET"] = "definir %1 para %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Criar 'obter %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Define esta variável para ser igual à entrada.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Uma variável chamada '%1' já existe.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Uma variável chamada '%1' já existe para outro tipo: '%2'.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_A_PARAMETER"] = "Uma variável chamada '%1' já existe como parâmetro na função '%2'.";
Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Área de Trabalho do Blockly";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Diga algo...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";
Blockly.Msg["PROCEDURES_HUE"] = "290";


// Comandos do Drone
Blockly.Msg["BKY_DRONE_TAKEOFF"] = "decolar";
Blockly.Msg["BKY_DRONE_TAKEOFF_TOOLTIP"] = "Faz o drone decolar";

Blockly.Msg["BKY_DRONE_LAND"] = "aterrar";
Blockly.Msg["BKY_DRONE_LAND_TOOLTIP"] = "Faz o drone aterrar";

Blockly.Msg["BKY_DRONE_SET_ALTITUDE"] = "definir altitude %1";
Blockly.Msg["BKY_DRONE_SET_ALTITUDE_TOOLTIP"] = "Define a altitude do drone";

Blockly.Msg["BKY_DRONE_CHANGE_ALTITUDE"] = "alterar altitude %1";
Blockly.Msg["BKY_DRONE_CHANGE_ALTITUDE_TOOLTIP"] = "Altera a altitude do drone";

Blockly.Msg["BKY_DRONE_SET_ANGLE"] = "definir ângulo %1";
Blockly.Msg["BKY_DRONE_SET_ANGLE_TOOLTIP"] = "Define o ângulo do drone";

Blockly.Msg["BKY_DRONE_CHANGE_ANGLE"] = "alterar ângulo %1";
Blockly.Msg["BKY_DRONE_CHANGE_ANGLE_TOOLTIP"] = "Altera o ângulo do drone";

Blockly.Msg["BKY_DRONE_SLIDE"] = "deslizar %1";
Blockly.Msg["BKY_DRONE_SLIDE_TOOLTIP"] = "Faz o drone deslizar";

Blockly.Msg["BKY_DRONE_WALK"] = "andar %1";
Blockly.Msg["BKY_DRONE_WALK_TOOLTIP"] = "Move o drone para frente";

Blockly.Msg["BKY_DRONE_WAIT"] = "esperar %1";
Blockly.Msg["BKY_DRONE_WAIT_TOOLTIP"] = "Faz o drone esperar";

Blockly.Msg["BKY_DRONE_SMOKE"] = "fumaça %1";
Blockly.Msg["BKY_DRONE_SMOKE_TOOLTIP"] = "Faz o drone soltar fumaça";


// Blocos de Sensores
Blockly.Msg["BKY_SENSOR_KEYPRESSED"] = "tecla %1 pressionada";
Blockly.Msg["BKY_SENSOR_KEYPRESSED_TOOLTIP"] = "Retorna verdadeiro se a tecla foi pressionada";

Blockly.Msg["ARROW_UP"]="Seta para Cima";
Blockly.Msg["ARROW_DOWN"]="Seta para Baixo";
Blockly.Msg["ARROW_LEFT"]="Seta para Esquerda";
Blockly.Msg["ARROW_RIGHT"]="Seta para Direita";
Blockly.Msg["SPACE"]="Espaço";
Blockly.Msg["RETURN"]="Enter";

Blockly.Msg["BKY_SENSOR_X"] = "X";
Blockly.Msg["BKY_SENSOR_X_TOOLTIP"] = "Retorna a coordenada X do drone";

Blockly.Msg["BKY_SENSOR_Z"] = "Z";
Blockly.Msg["BKY_SENSOR_Z_TOOLTIP"] = "Retorna a coordenada Z do drone";

Blockly.Msg["BKY_SENSOR_ALTITUDE"] = "Altitude";
Blockly.Msg["BKY_SENSOR_ALTITUDE_TOOLTIP"] = "Retorna a coordenada de altitude do drone";

Blockly.Msg["BKY_SENSOR_DIRECTION"] = "Direção";
Blockly.Msg["BKY_SENSOR_DIRECTION_TOOLTIP"] = "Retorna a coordenada de direção do drone";

// Menu
Blockly.Msg.BKY_NEW = "Novo";
Blockly.Msg.BKY_LOAD = "Carregar";
Blockly.Msg.BKY_SAVE = "Salvar";

// Category
Blockly.Msg["BKY_CATEGORY_LOGIC"]="Lógica";
Blockly.Msg["BKY_CATEGORY_LOOPS"]="Laços";
Blockly.Msg["BKY_CATEGORY_MATH"]="Matemática";
Blockly.Msg["BKY_CATEGORY_TEXT"]="Texto";
Blockly.Msg["BKY_CATEGORY_LISTS"]="Listas";
Blockly.Msg["BKY_CATEGORY_VARIABLES"]="Variáveis";
Blockly.Msg["BKY_CATEGORY_FUNCTIONS"]="Funções";
Blockly.Msg["BKY_CATEGORY_SENSORS"]="Sensores";
Blockly.Msg["BKY_CATEGORY_DRONE"]="Drone";

return Blockly.Msg;
}));
